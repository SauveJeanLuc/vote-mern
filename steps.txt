// APP Stack: Mongo + Express + React + Node

===============
    CLIENT
===============

* Create client directory with : npm init vite --> Choose React
* npm install
* npm run dev
* Add form whose states are kept with useState hooks + onChange and value
* Perfom requests using fetch
* Add react-router-dom: npm install react-router-dom --save
* Add react-bootstrap


===============
    SERVER
===============

* Create server directory with : mkdir server 
* Inside the directory: npm init
* Install Express: npm install express
* Install nodemon: npm install nodemon
* Set Nodemon Script in package.json + add gitignore
* Create Express Server : require('express')
* Handle CORS : npm install cors : app.use(corse())
* add express.json()
* Add Mongoose
* Create Schema
* sudo service mongod start
* Add jsonwebtoken implementation of json web tokens
* include bcrypt js for hashing passwords
* Include Joi for validations


===============
    DOCKER
===============

- dockerize server 
- dockerize client
- run docker-compose : docker-compose up


===============
    SWAGGIFY
===============

--> Go in Terminal
- npm i swaggiffy
- npx swaggiffy init

--> Go in index.js
- const { Swaggiffy } = require('swaggiffy'); // Using require
- new Swaggiffy().setupExpress(app).swaggiffy();

--> ignore swagger.json

nodemon --ignore '*swagger.json'

--> Register all models
const { registerSchema } = require('swaggiffy')
const model = mongoose.model("Candidate", CandidateSchema)

--> Register all routes
const { registerDefinition } = require("swaggiffy");



--> Access swagger
- localhost:PORT/api-docs